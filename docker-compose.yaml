version: '3.8'
services:
  car-selling-backend:
    build: 
      context: .
      dockerfile: Dockerfile
    command: npm run start
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      - kafka
      - postgres
      - rabbitmq
    volumes:
      - ./src:/usr/src/app/src
    networks:
      - cars-selling-api
  selling-microservice:
    build: 
      context: ../selling-microservice
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - kafka
      - postgres
      - rabbitmq
    volumes:
      - ./src:/usr/src/app/src
    networks:
      - cars-selling-api
  cars-microservice:
    build: 
      context: ../cars-microservice
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - kafka
      - postgres
      - rabbitmq
    volumes:
      - ./src:/usr/src/app/src
    networks:
      - cars-selling-api
  postgres:
    image: postgres:13
    ports:
      - 5435:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cars-selling-backend
      POSTGRES_HOST: localhost
    networks:
      - cars-selling-api
    volumes:
      - database_postgres:/var/lib/postgresql/data
  zookeeper:
    restart: always
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - cars-selling-api
    
  kafka:
    restart: on-failure
    image: docker.io/bitnami/kafka:3.3
    ports:
      - "9093:9093"
    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    networks:
      - cars-selling-api
    depends_on:
      - zookeeper
  rabbitmq:
        image: rabbitmq:3-management
        healthcheck:
            test: ["CMD", "rabbitmqctl", "status"]
            interval: 10s
            timeout: 5s
            retries: 5
        container_name: rabbitmq
        ports:
            - 5672:5672
            - 15672:15672
        networks:
          - cars-selling-api
        volumes:
          - rabbitmq_data:/var/lib/rabbitmq

networks:
  cars-selling-api:
    driver: bridge

volumes:
  kafka-volume:
  zookeeper-volume:
  database_postgres:
  api:
  rabbitmq_data: